{"version":3,"sources":["components/navbar/Navbar.tsx","enumerations/FlashType.ts","components/footer/Footer.tsx","components/formTask/FormTask.tsx","components/tasksManager/TaskManager.tsx","components/flash/Flash.tsx","enumerations/TaskType.ts","pages/tasks/Tasks.tsx","config/routes.ts","App.tsx","index.tsx"],"names":["Navbar","id","bg","variant","Brand","href","window","screen","width","Nav","className","Link","React","Component","navbar","document","getElementById","lastScrollValue","addEventListener","top","documentElement","scrollTop","console","log","classList","add","remove","flashType","Footer","FormTask","state","taskDescription","inputNewTask","handleTaskChange","event","setState","target","value","this","axios","post","description","createdAt","Date","now","then","res","props","onCreatedTask","data","catch","err","onErrorChild","Form","Group","Control","ref","el","placeholder","onChange","Button","onClick","addNewTask","TasksManager","task_to_update","isComplete","onUpdateTask","onDeleteTasks","Jumbotron","taskState","deleteCompletedTasks","Table","striped","bordered","hover","tasks","map","task","toString","toUTCString","type","defaultChecked","changeStateTask","Flash","hideTime","visibility","message","mouseOver","setMouseover","newMouseOverState","onHoverLeave","setTimeout","setVisibility","newVisibility","onMouseEnter","onMouseLeave","Alert","onClose","dismissible","Heading","App","Array","tasksType","TaskType","all","childFlash","addTask","newTask","push","sortByDate","setNewFlashMessage","success","updateTask","taskChanged","put","taskUpdated","i","length","deleteTasks","newTasks","forEach","delete","filter","response","warning","error","undefined","createRef","setSetupRoutes","match","path","getAllTasks","newTasksType","inprogress","history","pathname","generatePath","a","get","reverse","sort","b","getTime","current","sendFlashMessage","params","completed","routes","name","component","exact","defaults","baseURL","Container","route","index","render","ReactDOM","createElement"],"mappings":"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","file":"static/js/main.49752d85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport NavbarB from 'react-bootstrap/NavBar';\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <NavbarB id=\"navbar\" bg=\"light\" variant=\"light\">\r\n                <NavbarB.Brand href=\"#home\">Tasks Manager</NavbarB.Brand>\r\n                {window.screen.width < 900 &&\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"/tasks/inprogress\">in progress</Nav.Link>\r\n                        <Nav.Link href=\"/tasks/completed\">completed</Nav.Link>\r\n                    </Nav>}\r\n            </NavbarB>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;\r\n\r\nlet navbar = document.getElementById(\"navbar\");\r\nlet lastScrollValue = 0;\r\n\r\ndocument.addEventListener('scroll', () => {\r\n    let top = document.documentElement.scrollTop;\r\n    if (navbar !== null) {\r\n        console.log(navbar)\r\n        if (lastScrollValue < top) {\r\n            navbar.classList.add(\"hidden\");\r\n        } else {\r\n            navbar.classList.remove(\"hidden\");\r\n        }\r\n    }\r\n    lastScrollValue = top;\r\n});","enum flashType {\r\n    primary = \"primary\",\r\n    warning = \"warning\",\r\n    success = \"success\"\r\n}\r\n\r\nexport default flashType;","import React, { Component } from 'react';\r\nimport \"./Footer.scss\";\r\n\r\nclass Footer extends Component  {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <p>Â© 2021 Task manager</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport \"./FormTask.scss\"\r\nimport axios, { AxiosError } from 'axios';\r\nimport Task from '../../models/TaskModel';\r\n\r\ninterface IProps {\r\n    onCreatedTask: (task: Task) => void\r\n    onErrorChild: (error: AxiosError) => void\r\n}\r\ninterface IState {\r\n    taskDescription: string;\r\n}\r\n\r\nclass FormTask extends Component<IProps, IState> {\r\n    readonly state = { taskDescription: \"\" };\r\n    inputNewTask: any;\r\n\r\n    handleTaskChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ taskDescription: event.target.value });\r\n    }\r\n    addNewTask() {\r\n        if (this.state.taskDescription !== \"\") {\r\n            axios.post(`/TASK`, { description: this.state.taskDescription, createdAt: Date.now() })\r\n                .then(res => {\r\n                    this.props.onCreatedTask(res.data)\r\n                    this.inputNewTask.value = \"\";\r\n                    this.setState({\r\n                        taskDescription: \"\"\r\n                    })\r\n                }).catch(err => {\r\n                    this.props.onErrorChild(err)\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"form_new_tasks_container\">\r\n                <Form className=\"form_new_tasks\">\r\n                    <Form.Group className=\"new_tasks_input\">\r\n                        <Form.Control ref={(el: HTMLInputElement) => this.inputNewTask = el} placeholder=\"Enter your new task\" onChange={this.handleTaskChange} />\r\n                    </Form.Group>\r\n                    <Button className=\"new_tasks_button\" variant=\"primary\" onClick={() => this.addNewTask()}>\r\n                        Create\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormTask;","import React, { Component } from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport \"./TaskManager.scss\"\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport Task from '../../models/TaskModel';\r\n\r\ninterface IProps {\r\n    taskState: string;\r\n    tasks: Task[];\r\n    onUpdateTask: (task: Task) => void;\r\n    onDeleteTasks: () => void;\r\n}\r\n\r\nclass TasksManager extends Component<IProps> {\r\n    changeStateTask(task_to_update: Task) {\r\n        task_to_update.isComplete = !task_to_update.isComplete\r\n        this.props.onUpdateTask(task_to_update)\r\n    }\r\n    deleteCompletedTasks() {\r\n        this.props.onDeleteTasks()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"tasks_manager\">\r\n                <Jumbotron className=\"tasks_title_container\">\r\n                    {this.props.taskState === \"false\" &&\r\n                        <div>\r\n                            <h1>Tasks in progress</h1>\r\n                        </div>\r\n                    }\r\n                    {this.props.taskState === \"true\" &&\r\n                        <div>\r\n                            <h1>Tasks done</h1>\r\n                            <p>\r\n                                <Button variant=\"primary\" onClick={() => this.deleteCompletedTasks()}>Clear all</Button>\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                </Jumbotron>\r\n                <Table striped bordered hover className=\"tasks_manager_table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Description</th>\r\n                            <th>Created at</th>\r\n                            <th>State</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.tasks.map(task => {\r\n                            if (task.isComplete.toString() === this.props.taskState) {\r\n                                return (<tr key={task.id}>\r\n                                    <td>{task.description}</td>\r\n                                    <td>{new Date(task.createdAt).toUTCString()}</td>\r\n                                    <td>\r\n                                        <input type=\"checkbox\" defaultChecked={task.isComplete} onChange={() => this.changeStateTask(task)}></input>\r\n                                    </td>\r\n                                </tr>);\r\n                            }\r\n                            return null\r\n                        }\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TasksManager;","import React, { Component } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport './Flash.scss'\r\n\r\ninterface IProps {\r\n\r\n}\r\ninterface IState {\r\n    visibility: boolean,\r\n    type: string,\r\n    message: string,\r\n    hideTime: number,\r\n    mouseOver: boolean\r\n}\r\n\r\nclass Flash extends Component<IProps, IState> {\r\n    readonly state = {\r\n        hideTime: 4000,\r\n        visibility: false,\r\n        type: \"\",\r\n        message: \"\",\r\n        mouseOver: false\r\n    };\r\n\r\n    sendFlashMessage(message: string, type: string) {\r\n        this.setState({\r\n            visibility: true,\r\n            type: type,\r\n            message: message\r\n        });\r\n\r\n        setTimeout(() => {\r\n            if (!this.state.mouseOver) {\r\n                this.setState({\r\n                    visibility: false\r\n                });\r\n            }\r\n        }, this.state.hideTime);\r\n\r\n    }\r\n\r\n    setMouseover = (newMouseOverState: boolean) => {\r\n        this.setState({\r\n            mouseOver: newMouseOverState\r\n        });\r\n    }\r\n\r\n    onHoverLeave = () => {\r\n        this.setMouseover(false)\r\n        setTimeout(() => {\r\n            if (!this.state.mouseOver) {\r\n                this.setState({\r\n                    visibility: false\r\n                });\r\n            }\r\n        }, this.state.hideTime/2);\r\n    }\r\n\r\n    setVisibility = (newVisibility: boolean) => {\r\n        this.setState({\r\n            visibility: newVisibility\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onMouseEnter={() => this.setMouseover(true)} onMouseLeave={() => this.onHoverLeave()} className=\"flash_messages_container\">\r\n                {this.state.visibility === true &&\r\n                    <Alert onClose={() => this.setVisibility(false)} variant={this.state.type} dismissible>\r\n                        <Alert.Heading className=\"flash_message_title\">{this.state.type}</Alert.Heading>\r\n                        <p>\r\n                            {this.state.message}\r\n                        </p>\r\n                    </Alert>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Flash;","enum flashType {\r\n    all = \"all\",\r\n    completed = \"completed\",\r\n    inprogress = \"inprogress\"\r\n}\r\n\r\nexport default flashType;","import React from 'react';\r\nimport FormTask from \"../../components/formTask/FormTask\";\r\nimport TaskManager from \"../../components/tasksManager/TaskManager\";\r\nimport \"./Tasks.scss\"\r\nimport axios, { AxiosError } from 'axios';\r\nimport Task from '../../models/TaskModel'\r\nimport Flash from '../../components/flash/Flash';\r\nimport flashType from '../../enumerations/FlashType';\r\nimport { generatePath, RouteComponentProps } from 'react-router-dom';\r\nimport TaskType from '../../enumerations/TaskType'\r\n\r\ninterface IProps { }\r\ninterface IState {\r\n    tasks: Task[],\r\n    tasksType: string\r\n}\r\n\r\nclass App extends React.Component<IState & RouteComponentProps<any>, IProps>  {\r\n    readonly state = { tasks: Array<Task>(), tasksType: TaskType.all };\r\n    childFlash: React.RefObject<Flash>;\r\n\r\n    constructor(props: IState & RouteComponentProps<any>) {\r\n        super(props);\r\n        this.childFlash = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setSetupRoutes()\r\n        if (this.props.match.path !== '/') {\r\n            this.getAllTasks().then(res => {\r\n                this.setState({\r\n                    tasks: this.sortByDate(this.state.tasks)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    setSetupRoutes() {\r\n        if (this.props.match.path === '/') {\r\n            let newTasksType;\r\n            if (window.screen.width > 900) {\r\n                newTasksType = TaskType.all;\r\n            } else {\r\n                newTasksType = TaskType.inprogress;\r\n            }\r\n            this.props.history.push({\r\n                pathname: generatePath('/tasks/:tasksType', { tasksType: newTasksType })\r\n            });\r\n        }\r\n    }\r\n    async getAllTasks(): Promise<Task[]> {\r\n        await axios.get(`/TASK`)\r\n            .then(res => {\r\n                const tasks = res.data.reverse();\r\n                tasks.forEach((task: Task) => {\r\n                    this.state.tasks.push(task)\r\n                });\r\n                return this.sortByDate(this.state.tasks)\r\n            }).catch(err => {\r\n                this.setNewFlashMessage(err.response.data, flashType.warning);\r\n            });\r\n        return []\r\n    }\r\n    addTask = (newTask: Task) => {\r\n        this.state.tasks.push(newTask)\r\n        this.setState({\r\n            tasks: this.sortByDate(this.state.tasks)\r\n        });\r\n        this.setNewFlashMessage(`task ${newTask.description} successfully added`, flashType.success);\r\n    }\r\n    updateTask = (taskChanged: Task) => {\r\n        axios.put(`/TASK/` + taskChanged.id, { isComplete: taskChanged.isComplete, description: taskChanged.description })\r\n            .then(res => {\r\n                const taskUpdated = res.data\r\n                for (let i = 0; i < this.state.tasks.length; i++) {\r\n                    if (taskUpdated.id === this.state.tasks[i].id) {\r\n                        let tasks = [...this.state.tasks];\r\n                        tasks[i] = taskUpdated;\r\n                        this.setState({\r\n                            tasks: this.sortByDate(tasks)\r\n                        })\r\n                        this.setNewFlashMessage(`task ${taskUpdated.description} has been updated`, flashType.success);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n    deleteTasks = () => {\r\n        let newTasks = []\r\n        this.state.tasks.forEach(task => {\r\n            if (task.isComplete === true) {\r\n                axios.delete(`/TASK/` + task.id).then(res => {\r\n                    newTasks = this.state.tasks.filter(value => value.id !== task.id);\r\n                    this.setState({\r\n                        tasks: this.sortByDate(newTasks)\r\n                    });\r\n                    this.setNewFlashMessage(`task successfully deleted`, flashType.success);\r\n                }).catch(err => {\r\n                    this.setNewFlashMessage(err.response.data, flashType.warning);\r\n                })\r\n            }\r\n        });\r\n    }\r\n    sortByDate(tasks: Task[]) {\r\n        return tasks.sort(function (a: Task, b: Task) {\r\n            return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n        });\r\n    }\r\n\r\n    onErrorChild = (error: AxiosError) => {\r\n        if (error.response !== undefined) {\r\n            this.setNewFlashMessage(error.response.data, flashType.warning);\r\n        }\r\n    }\r\n\r\n    setNewFlashMessage(message: string, type: string) {\r\n        if (this.childFlash.current) {\r\n            this.childFlash.current.sendFlashMessage(message, type);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Flash ref={this.childFlash} />\r\n                <div className=\"tasks_managers_container\">\r\n                    {(this.props.match.params.tasksType === TaskType.all || this.props.match.params.tasksType === TaskType.inprogress) &&\r\n                        <FormTask onCreatedTask={this.addTask} onErrorChild={this.onErrorChild} />}\r\n                    <div className=\"tasks_managers\">\r\n                        {(this.props.match.params.tasksType === TaskType.all || this.props.match.params.tasksType === TaskType.inprogress) &&\r\n                            <TaskManager tasks={this.state.tasks} onUpdateTask={this.updateTask} onDeleteTasks={this.deleteTasks} taskState=\"false\" />}\r\n\r\n                        {(this.props.match.params.tasksType === TaskType.all || this.props.match.params.tasksType === TaskType.completed) &&\r\n                            <TaskManager tasks={this.state.tasks} onUpdateTask={this.updateTask} onDeleteTasks={this.deleteTasks} taskState=\"true\" />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","import IRoute from '../interfaces/route';\nimport TasksPage from '../pages/tasks/Tasks';\n\nconst routes: IRoute[] = [\n    {\n        path: '/',\n        name: 'Home Page',\n        component: TasksPage,\n        exact: true\n    },\n    {\n        path: '/tasks/:tasksType',\n        name: 'Tasks Page',\n        component: TasksPage,\n        exact: true\n    },\n]\n\nexport default routes;","import React from 'react';\nimport Navbar from \"./components/navbar/Navbar\";\nimport Footer from \"./components/footer/Footer\";\nimport Container from 'react-bootstrap/Container';\nimport { BrowserRouter, Route, Switch, RouteComponentProps } from 'react-router-dom';\nimport routes from './config/routes';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://6091661250c25500176781bb.mockapi.io';\n\nclass App extends React.Component<{}> {\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Navbar />\n          <Container className=\"mt-5 mb-5\">\n            <Switch>\n              {routes.map((route, index) => {\n                return (\n                  <Route\n                    key={index}\n                    path={route.path}\n                    exact={route.exact}\n                    render={(props: RouteComponentProps<any>) => (\n                      <route.component\n                        name={route.name}\n                        {...props}\n                        {...route.props}\n                      />\n                    )}\n                  />\n                );\n              })}\n            </Switch>\n          </Container>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(React.createElement(App), document.getElementById(\"root\"));"],"sourceRoot":""}